
flashlight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800358c  0800358c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003594  08003594  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800359c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000010  080035ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080035ac  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009204  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a33  00000000  00000000  0002923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001067a  00000000  00000000  0002c0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8e9  00000000  00000000  0003c752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000653c3  00000000  00000000  0004703b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ac3fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  000ac450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003540 	.word	0x08003540

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003540 	.word	0x08003540

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <CRT10_square>:

extern uint8_t tic;

state_machine_t st = idle;

uint16_t CRT10_square(uint16_t val) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dbb      	adds	r3, r7, #6
 80004b2:	801a      	strh	r2, [r3, #0]
    return ((long)val * val + 1023) >> 10;
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	1dba      	adds	r2, r7, #6
 80004ba:	8812      	ldrh	r2, [r2, #0]
 80004bc:	4353      	muls	r3, r2
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <CRT10_square+0x28>)
 80004c0:	4694      	mov	ip, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	129b      	asrs	r3, r3, #10
 80004c6:	b29b      	uxth	r3, r3
}
 80004c8:	0018      	movs	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	000003ff 	.word	0x000003ff

080004d4 <set_brightness>:
uint16_t CRT10_cubic(uint16_t val) {
    return ((long)val * val * val + 2094081) >> 20;
}

void set_brightness(uint16_t val)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	0002      	movs	r2, r0
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	801a      	strh	r2, [r3, #0]
	if(val > 1023)
 80004e0:	1dbb      	adds	r3, r7, #6
 80004e2:	881a      	ldrh	r2, [r3, #0]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d302      	bcc.n	80004f2 <set_brightness+0x1e>
	{
		val = 1023;
 80004ec:	1dbb      	adds	r3, r7, #6
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <set_brightness+0x3c>)
 80004f0:	801a      	strh	r2, [r3, #0]
	}
	  TIM2->CCR1 = CRT10_square(val);
 80004f2:	1dbb      	adds	r3, r7, #6
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ffd6 	bl	80004a8 <CRT10_square>
 80004fc:	0003      	movs	r3, r0
 80004fe:	001a      	movs	r2, r3
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	000003ff 	.word	0x000003ff

08000514 <button_on>:
void button_on(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2201      	movs	r2, #1
 800051e:	2180      	movs	r1, #128	; 0x80
 8000520:	0018      	movs	r0, r3
 8000522:	f000 ffc8 	bl	80014b6 <HAL_GPIO_WritePin>
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <button_off>:

void button_off(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2200      	movs	r2, #0
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0018      	movs	r0, r3
 800053a:	f000 ffbc 	bl	80014b6 <HAL_GPIO_WritePin>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <time_out>:

void time_out(void (*p_sleep_foo)(void))
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if(sleep_time_out > 1)
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <time_out+0x2c>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d906      	bls.n	8000562 <time_out+0x1e>
	{
		sleep_time_out--;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <time_out+0x2c>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <time_out+0x2c>)
 800055e:	801a      	strh	r2, [r3, #0]
	else
	{
		//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
		p_sleep_foo();
	}
}
 8000560:	e001      	b.n	8000566 <time_out+0x22>
		p_sleep_foo();
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4798      	blx	r3
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000002 	.word	0x20000002

08000574 <start_lp_timer_10s>:
void start_lp_timer_10s(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_LPTIM_TimeOut_Start_IT(&hlptim1,2890,0);
 8000578:	4904      	ldr	r1, [pc, #16]	; (800058c <start_lp_timer_10s+0x18>)
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <start_lp_timer_10s+0x1c>)
 800057c:	2200      	movs	r2, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f001 f85e 	bl	8001640 <HAL_LPTIM_TimeOut_Start_IT>
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	00000b4a 	.word	0x00000b4a
 8000590:	2000002c 	.word	0x2000002c

08000594 <sleep_mode>:

void sleep_mode(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000598:	2101      	movs	r1, #1
 800059a:	2001      	movs	r0, #1
 800059c:	f001 fb4a 	bl	8001c34 <HAL_PWR_EnterSLEEPMode>
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <stop_mode>:

void stop_mode(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80005aa:	2101      	movs	r1, #1
 80005ac:	2001      	movs	r0, #1
 80005ae:	f001 fb99 	bl	8001ce4 <HAL_PWR_EnterSTOPMode>
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <reset_led_satus>:
void reset_led_satus(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	g_level = 0;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <reset_led_satus+0x18>)
 80005be:	2200      	movs	r2, #0
 80005c0:	801a      	strh	r2, [r3, #0]
	g_direction = 0;
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <reset_led_satus+0x1c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	2000009f 	.word	0x2000009f

080005d8 <check_button>:

void check_button(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if(g_bt_flag == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <check_button+0x120>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d139      	bne.n	8000658 <check_button+0x80>
 80005e4:	23a0      	movs	r3, #160	; 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2120      	movs	r1, #32
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ff46 	bl	800147c <HAL_GPIO_ReadPin>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d131      	bne.n	8000658 <check_button+0x80>
	{
		if(g_long_press > 2002)
 80005f4:	4b41      	ldr	r3, [pc, #260]	; (80006fc <check_button+0x124>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	4a41      	ldr	r2, [pc, #260]	; (8000700 <check_button+0x128>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d912      	bls.n	8000624 <check_button+0x4c>
		{
			g_bt_flag = 0;
 80005fe:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <check_button+0x120>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
			g_long_press = 0;
 8000604:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <check_button+0x124>)
 8000606:	2200      	movs	r2, #0
 8000608:	801a      	strh	r2, [r3, #0]
			g_level = g_brightness;
 800060a:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <check_button+0x12c>)
 800060c:	881a      	ldrh	r2, [r3, #0]
 800060e:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <check_button+0x130>)
 8000610:	801a      	strh	r2, [r3, #0]
			set_brightness(g_level);
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <check_button+0x130>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff5c 	bl	80004d4 <set_brightness>
			st = run;
 800061c:	4b3b      	ldr	r3, [pc, #236]	; (800070c <check_button+0x134>)
 800061e:	2202      	movs	r2, #2
 8000620:	701a      	strb	r2, [r3, #0]
		if(g_long_press > 2002)
 8000622:	e066      	b.n	80006f2 <check_button+0x11a>
		}
		else
		{
			g_bt_flag = 0;
 8000624:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <check_button+0x120>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
			if(g_double_click_time_out > 0)
 800062a:	4b39      	ldr	r3, [pc, #228]	; (8000710 <check_button+0x138>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <check_button+0x62>
			{
				g_brightness = 1023;
 8000632:	4b34      	ldr	r3, [pc, #208]	; (8000704 <check_button+0x12c>)
 8000634:	4a37      	ldr	r2, [pc, #220]	; (8000714 <check_button+0x13c>)
 8000636:	801a      	strh	r2, [r3, #0]
 8000638:	e002      	b.n	8000640 <check_button+0x68>
			}
			else
			{
				g_double_click_time_out = DOUBLE_CLICK_TIME_OUT;
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <check_button+0x138>)
 800063c:	22c8      	movs	r2, #200	; 0xc8
 800063e:	801a      	strh	r2, [r3, #0]
			}

			if(st == idle)
 8000640:	4b32      	ldr	r3, [pc, #200]	; (800070c <check_button+0x134>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d103      	bne.n	8000650 <check_button+0x78>
			{
				st = start;
 8000648:	4b30      	ldr	r3, [pc, #192]	; (800070c <check_button+0x134>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
		if(g_long_press > 2002)
 800064e:	e050      	b.n	80006f2 <check_button+0x11a>
			}
			else
			{
				st = stop;
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <check_button+0x134>)
 8000652:	2203      	movs	r2, #3
 8000654:	701a      	strb	r2, [r3, #0]
		if(g_long_press > 2002)
 8000656:	e04c      	b.n	80006f2 <check_button+0x11a>
			}
		}

	}
	else if(g_bt_flag == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1)
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <check_button+0x120>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d13a      	bne.n	80006d6 <check_button+0xfe>
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	2120      	movs	r1, #32
 8000666:	0018      	movs	r0, r3
 8000668:	f000 ff08 	bl	800147c <HAL_GPIO_ReadPin>
 800066c:	0003      	movs	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d131      	bne.n	80006d6 <check_button+0xfe>
	{
		g_long_press++;
 8000672:	4b22      	ldr	r3, [pc, #136]	; (80006fc <check_button+0x124>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <check_button+0x124>)
 800067c:	801a      	strh	r2, [r3, #0]

		if(g_long_press > 2000 && g_long_press < 2002 && st == run)
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <check_button+0x124>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	23fa      	movs	r3, #250	; 0xfa
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	429a      	cmp	r2, r3
 8000688:	d90f      	bls.n	80006aa <check_button+0xd2>
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <check_button+0x124>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4a22      	ldr	r2, [pc, #136]	; (8000718 <check_button+0x140>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d80a      	bhi.n	80006aa <check_button+0xd2>
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <check_button+0x134>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d106      	bne.n	80006aa <check_button+0xd2>
		{
			st = chn_brtnss;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <check_button+0x134>)
 800069e:	2204      	movs	r2, #4
 80006a0:	701a      	strb	r2, [r3, #0]
			g_brightness = g_level;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <check_button+0x130>)
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <check_button+0x12c>)
 80006a8:	801a      	strh	r2, [r3, #0]
		}

		if(g_long_press > 20000)
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <check_button+0x124>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4a1b      	ldr	r2, [pc, #108]	; (800071c <check_button+0x144>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d91e      	bls.n	80006f2 <check_button+0x11a>
		{
			button_off();
 80006b4:	f7ff ff3a 	bl	800052c <button_off>
			HAL_Delay(100);
 80006b8:	2064      	movs	r0, #100	; 0x64
 80006ba:	f000 fc77 	bl	8000fac <HAL_Delay>
			g_bt_flag = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <check_button+0x120>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
			st = idle;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <check_button+0x134>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
			set_brightness(0);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ff02 	bl	80004d4 <set_brightness>
			button_on();
 80006d0:	f7ff ff20 	bl	8000514 <button_on>
		if(g_long_press > 20000)
 80006d4:	e00d      	b.n	80006f2 <check_button+0x11a>
		}

	}
	else
	{
		g_long_press = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <check_button+0x124>)
 80006d8:	2200      	movs	r2, #0
 80006da:	801a      	strh	r2, [r3, #0]

		if(g_double_click_time_out > 0)
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <check_button+0x138>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <check_button+0x11a>
		{
			g_double_click_time_out--;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <check_button+0x138>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <check_button+0x138>)
 80006ee:	801a      	strh	r2, [r3, #0]
		}
	}

}
 80006f0:	e7ff      	b.n	80006f2 <check_button+0x11a>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000009e 	.word	0x2000009e
 80006fc:	200000a2 	.word	0x200000a2
 8000700:	000007d2 	.word	0x000007d2
 8000704:	20000000 	.word	0x20000000
 8000708:	2000009c 	.word	0x2000009c
 800070c:	200000a6 	.word	0x200000a6
 8000710:	200000a4 	.word	0x200000a4
 8000714:	000003ff 	.word	0x000003ff
 8000718:	000007d1 	.word	0x000007d1
 800071c:	00004e20 	.word	0x00004e20

08000720 <indicate_low_batt_status>:

static void indicate_low_batt_status(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	//HAL_LPTIM_TimeOut_Start_IT(&hlptim1,2890,0);
	if(g_speed++ > SPEED)
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <indicate_low_batt_status+0x7c>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	b291      	uxth	r1, r2
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <indicate_low_batt_status+0x7c>)
 800072e:	8011      	strh	r1, [r2, #0]
 8000730:	2b0a      	cmp	r3, #10
 8000732:	d930      	bls.n	8000796 <indicate_low_batt_status+0x76>
	{
		g_speed = 0;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <indicate_low_batt_status+0x7c>)
 8000736:	2200      	movs	r2, #0
 8000738:	801a      	strh	r2, [r3, #0]

		if(g_direction)
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <indicate_low_batt_status+0x80>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d018      	beq.n	8000774 <indicate_low_batt_status+0x54>
		{
			if(g_level-- > 1)
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <indicate_low_batt_status+0x84>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	b291      	uxth	r1, r2
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <indicate_low_batt_status+0x84>)
 800074c:	8011      	strh	r1, [r2, #0]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d905      	bls.n	800075e <indicate_low_batt_status+0x3e>
			{
				set_brightness(g_level);
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <indicate_low_batt_status+0x84>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff febc 	bl	80004d4 <set_brightness>
				g_direction = 1;
			}
		}
	}

}
 800075c:	e01b      	b.n	8000796 <indicate_low_batt_status+0x76>
				g_direction = 0;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <indicate_low_batt_status+0x80>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
				start_lp_timer_10s();
 8000764:	f7ff ff06 	bl	8000574 <start_lp_timer_10s>
				HAL_Delay(50);
 8000768:	2032      	movs	r0, #50	; 0x32
 800076a:	f000 fc1f 	bl	8000fac <HAL_Delay>
				stop_mode();
 800076e:	f7ff ff1a 	bl	80005a6 <stop_mode>
}
 8000772:	e010      	b.n	8000796 <indicate_low_batt_status+0x76>
			if(g_level++ < MAX_BRNESS)
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <indicate_low_batt_status+0x84>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	b291      	uxth	r1, r2
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <indicate_low_batt_status+0x84>)
 800077e:	8011      	strh	r1, [r2, #0]
 8000780:	2b95      	cmp	r3, #149	; 0x95
 8000782:	d805      	bhi.n	8000790 <indicate_low_batt_status+0x70>
				 set_brightness(g_level);
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <indicate_low_batt_status+0x84>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fea3 	bl	80004d4 <set_brightness>
}
 800078e:	e002      	b.n	8000796 <indicate_low_batt_status+0x76>
				g_direction = 1;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <indicate_low_batt_status+0x80>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000a0 	.word	0x200000a0
 80007a0:	2000009f 	.word	0x2000009f
 80007a4:	2000009c 	.word	0x2000009c

080007a8 <state_of_device>:

void state_of_device(state_machine_t state)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	0002      	movs	r2, r0
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	701a      	strb	r2, [r3, #0]
	switch(state)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	d900      	bls.n	80007be <state_of_device+0x16>
 80007bc:	e062      	b.n	8000884 <state_of_device+0xdc>
 80007be:	009a      	lsls	r2, r3, #2
 80007c0:	4b33      	ldr	r3, [pc, #204]	; (8000890 <state_of_device+0xe8>)
 80007c2:	18d3      	adds	r3, r2, r3
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	469f      	mov	pc, r3
	{
		case idle:
		{
			//put your code here
			time_out(stop_mode);
 80007c8:	4b32      	ldr	r3, [pc, #200]	; (8000894 <state_of_device+0xec>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f7ff feba 	bl	8000544 <time_out>
			break;
 80007d0:	e059      	b.n	8000886 <state_of_device+0xde>
		}
		case start:
		{
			//put your code here
			if(g_level++ < g_brightness - 1)
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <state_of_device+0xf0>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	b291      	uxth	r1, r2
 80007da:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <state_of_device+0xf0>)
 80007dc:	8011      	strh	r1, [r2, #0]
 80007de:	001a      	movs	r2, r3
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <state_of_device+0xf4>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	429a      	cmp	r2, r3
 80007e8:	da05      	bge.n	80007f6 <state_of_device+0x4e>
			{
				set_brightness(g_level);
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <state_of_device+0xf0>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fe70 	bl	80004d4 <set_brightness>
			}
			else
			{
				st = run;
			}
			break;
 80007f4:	e047      	b.n	8000886 <state_of_device+0xde>
				st = run;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <state_of_device+0xf8>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	701a      	strb	r2, [r3, #0]
			break;
 80007fc:	e043      	b.n	8000886 <state_of_device+0xde>
		}
		case run:
		{
			//put your code here
			time_out(sleep_mode);
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <state_of_device+0xfc>)
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fe9f 	bl	8000544 <time_out>
			break;
 8000806:	e03e      	b.n	8000886 <state_of_device+0xde>
		}
		case stop:
		{
			//put your code here
			if(g_level-- > 1)
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <state_of_device+0xf0>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	b291      	uxth	r1, r2
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <state_of_device+0xf0>)
 8000812:	8011      	strh	r1, [r2, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d905      	bls.n	8000824 <state_of_device+0x7c>
			{
				set_brightness(g_level);
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <state_of_device+0xf0>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fe59 	bl	80004d4 <set_brightness>
			}
			else
			{
				st = idle;
			}
			break;
 8000822:	e030      	b.n	8000886 <state_of_device+0xde>
				st = idle;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <state_of_device+0xf8>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
			break;
 800082a:	e02c      	b.n	8000886 <state_of_device+0xde>
		}
		case low_battery:
		{
			//put your code here
			indicate_low_batt_status();
 800082c:	f7ff ff78 	bl	8000720 <indicate_low_batt_status>
			break;
 8000830:	e029      	b.n	8000886 <state_of_device+0xde>
		}
		case chn_brtnss:
		{
			//put your code here
			if(g_direction)
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <state_of_device+0x100>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d011      	beq.n	800085e <state_of_device+0xb6>
			{
				if(g_brightness-- > 80)
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <state_of_device+0xf4>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	1e5a      	subs	r2, r3, #1
 8000840:	b291      	uxth	r1, r2
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <state_of_device+0xf4>)
 8000844:	8011      	strh	r1, [r2, #0]
 8000846:	2b50      	cmp	r3, #80	; 0x50
 8000848:	d905      	bls.n	8000856 <state_of_device+0xae>
				{
					set_brightness(g_brightness);
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <state_of_device+0xf4>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff fe40 	bl	80004d4 <set_brightness>
				else
				{
					g_direction = 1;
				}
			}
			break;
 8000854:	e017      	b.n	8000886 <state_of_device+0xde>
					g_direction = 0;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <state_of_device+0x100>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
			break;
 800085c:	e013      	b.n	8000886 <state_of_device+0xde>
				if(g_brightness++ < 1023)
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <state_of_device+0xf4>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	b291      	uxth	r1, r2
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <state_of_device+0xf4>)
 8000868:	8011      	strh	r1, [r2, #0]
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <state_of_device+0x104>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d805      	bhi.n	800087c <state_of_device+0xd4>
					set_brightness(g_brightness);
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <state_of_device+0xf4>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fe2d 	bl	80004d4 <set_brightness>
			break;
 800087a:	e004      	b.n	8000886 <state_of_device+0xde>
					g_direction = 1;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <state_of_device+0x100>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
			break;
 8000882:	e000      	b.n	8000886 <state_of_device+0xde>
		}
		default:
		{
			//put your code here

			break;
 8000884:	46c0      	nop			; (mov r8, r8)
		}

	}
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	08003558 	.word	0x08003558
 8000894:	080005a7 	.word	0x080005a7
 8000898:	2000009c 	.word	0x2000009c
 800089c:	20000000 	.word	0x20000000
 80008a0:	200000a6 	.word	0x200000a6
 80008a4:	08000595 	.word	0x08000595
 80008a8:	2000009f 	.word	0x2000009f
 80008ac:	000003fe 	.word	0x000003fe

080008b0 <start_pvd>:

void start_pvd(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	PWR_PVDTypeDef sConfigPVD;

	HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fc46 	bl	800114c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fc58 	bl	8001176 <HAL_NVIC_EnableIRQ>

	sConfigPVD.PVDLevel = PWR_CR_PLS_LEV6;
 80008c6:	003b      	movs	r3, r7
 80008c8:	22c0      	movs	r2, #192	; 0xc0
 80008ca:	601a      	str	r2, [r3, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING_FALLING;
 80008cc:	003b      	movs	r3, r7
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <start_pvd+0x38>)
 80008d0:	605a      	str	r2, [r3, #4]


	HAL_PWR_ConfigPVD(&sConfigPVD);
 80008d2:	003b      	movs	r3, r7
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 f93d 	bl	8001b54 <HAL_PWR_ConfigPVD>
	HAL_PWR_EnablePVD();
 80008da:	f001 f99d 	bl	8001c18 <HAL_PWR_EnablePVD>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	00010003 	.word	0x00010003

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 faec 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f828 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f93e 	bl	8000b78 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008fc:	f000 f8be 	bl	8000a7c <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8000900:	f000 f892 	bl	8000a28 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  //start_pvd();
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <main+0x50>)
 8000906:	2100      	movs	r1, #0
 8000908:	0018      	movs	r0, r3
 800090a:	f002 f973 	bl	8002bf4 <HAL_TIM_PWM_Start>
  set_brightness(0);
 800090e:	2000      	movs	r0, #0
 8000910:	f7ff fde0 	bl	80004d4 <set_brightness>
  button_on();
 8000914:	f7ff fdfe 	bl	8000514 <button_on>
  start_pvd();
 8000918:	f7ff ffca 	bl	80008b0 <start_pvd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(tic > 0)
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <main+0x54>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0fb      	beq.n	800091c <main+0x30>
	  {
		  state_of_device(st);
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <main+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ff3d 	bl	80007a8 <state_of_device>
		  check_button();
 800092e:	f7ff fe53 	bl	80005d8 <check_button>

		  tic = 0;
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <main+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
	  if(tic > 0)
 8000938:	e7f0      	b.n	800091c <main+0x30>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	2000005c 	.word	0x2000005c
 8000940:	200000a7 	.word	0x200000a7
 8000944:	200000a6 	.word	0x200000a6

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b099      	sub	sp, #100	; 0x64
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	242c      	movs	r4, #44	; 0x2c
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2334      	movs	r3, #52	; 0x34
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f002 fde9 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	2318      	movs	r3, #24
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f002 fde1 	bl	8003530 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096e:	003b      	movs	r3, r7
 8000970:	0018      	movs	r0, r3
 8000972:	2318      	movs	r3, #24
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f002 fdda 	bl	8003530 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <SystemClock_Config+0xd8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <SystemClock_Config+0xdc>)
 8000982:	401a      	ands	r2, r3
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <SystemClock_Config+0xd8>)
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	0109      	lsls	r1, r1, #4
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800098e:	0021      	movs	r1, r4
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2218      	movs	r2, #24
 8000994:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2201      	movs	r2, #1
 800099a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2201      	movs	r2, #1
 80009a0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	22c0      	movs	r2, #192	; 0xc0
 80009ac:	0212      	lsls	r2, r2, #8
 80009ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	0018      	movs	r0, r3
 80009ba:	f001 fa03 	bl	8001dc4 <HAL_RCC_OscConfig>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009c2:	f000 f96b 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	2118      	movs	r1, #24
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	220f      	movs	r2, #15
 80009cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fd66 	bl	80024bc <HAL_RCC_ClockConfig>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009f4:	f000 f952 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80009f8:	003b      	movs	r3, r7
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80009fe:	003b      	movs	r3, r7
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	02d2      	lsls	r2, r2, #11
 8000a04:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a06:	003b      	movs	r3, r7
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 ff45 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a12:	f000 f943 	bl	8000c9c <Error_Handler>
  }
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b019      	add	sp, #100	; 0x64
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40007000 	.word	0x40007000
 8000a24:	ffffe7ff 	.word	0xffffe7ff

08000a28 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a2e:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <MX_LPTIM1_Init+0x4c>)
 8000a30:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a3a:	22e0      	movs	r2, #224	; 0xe0
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a42:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <MX_LPTIM1_Init+0x50>)
 8000a44:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	03d2      	lsls	r2, r2, #15
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <MX_LPTIM1_Init+0x48>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fd63 	bl	8001528 <HAL_LPTIM_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_LPTIM1_Init+0x42>
  {
    Error_Handler();
 8000a66:	f000 f919 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000002c 	.word	0x2000002c
 8000a74:	40007c00 	.word	0x40007c00
 8000a78:	0000ffff 	.word	0x0000ffff

08000a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	2318      	movs	r3, #24
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	0018      	movs	r0, r3
 8000a88:	2310      	movs	r3, #16
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f002 fd4f 	bl	8003530 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	2310      	movs	r3, #16
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	0018      	movs	r0, r3
 8000a98:	2308      	movs	r3, #8
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f002 fd47 	bl	8003530 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f002 fd40 	bl	8003530 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	05d2      	lsls	r2, r2, #23
 8000ab6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 f802 	bl	8002ae4 <HAL_TIM_Base_Init>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000ae4:	f000 f8da 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae8:	2118      	movs	r1, #24
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	0152      	lsls	r2, r2, #5
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f002 f9c5 	bl	8002e88 <HAL_TIM_ConfigClockSource>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000b02:	f000 f8cb 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f002 f82b 	bl	8002b64 <HAL_TIM_PWM_Init>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b12:	f000 f8c3 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2110      	movs	r1, #16
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b24:	187a      	adds	r2, r7, r1
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 fc8c 	bl	8003448 <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000b34:	f000 f8b2 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2260      	movs	r2, #96	; 0x60
 8000b3c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b50:	0039      	movs	r1, r7
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 f8d0 	bl	8002cfc <HAL_TIM_PWM_ConfigChannel>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b60:	f000 f89c 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <MX_TIM2_Init+0xf8>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f8f0 	bl	8000d4c <HAL_TIM_MspPostInit>

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b00a      	add	sp, #40	; 0x28
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000005c 	.word	0x2000005c

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 fcd2 	bl	8003530 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_GPIO_Init+0x9c>)
 8000b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_GPIO_Init+0x9c>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_GPIO_Init+0x9c>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2182      	movs	r1, #130	; 0x82
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fc82 	bl	80014b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2282      	movs	r2, #130	; 0x82
 8000bb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2201      	movs	r2, #1
 8000bbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	1d3a      	adds	r2, r7, #4
 8000bcc:	23a0      	movs	r3, #160	; 0xa0
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 faec 	bl	80011b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2220      	movs	r2, #32
 8000bdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2288      	movs	r2, #136	; 0x88
 8000be2:	0352      	lsls	r2, r2, #13
 8000be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2202      	movs	r2, #2
 8000bea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	1d3a      	adds	r2, r7, #4
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fadb 	bl	80011b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2007      	movs	r0, #7
 8000c00:	f000 faa4 	bl	800114c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c04:	2007      	movs	r0, #7
 8000c06:	f000 fab6 	bl	8001176 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b006      	add	sp, #24
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	801a      	strh	r2, [r3, #0]
   if(GPIO_Pin == GPIO_PIN_5)
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	2b20      	cmp	r3, #32
 8000c2a:	d105      	bne.n	8000c38 <HAL_GPIO_EXTI_Callback+0x20>
   {
	   g_bt_flag = 1;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x28>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
	   sleep_time_out = SLEEP_MS;
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c36:	801a      	strh	r2, [r3, #0]
	  // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
   }
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000009e 	.word	0x2000009e
 8000c44:	20000002 	.word	0x20000002
 8000c48:	00001388 	.word	0x00001388

08000c4c <HAL_PWR_PVDCallback>:

void HAL_PWR_PVDCallback(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

	if(PWR->CSR & PWR_CSR_PVDO)
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_PWR_PVDCallback+0x44>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2204      	movs	r2, #4
 8000c56:	4013      	ands	r3, r2
 8000c58:	d00a      	beq.n	8000c70 <HAL_PWR_PVDCallback+0x24>
	{
		//dead battery
		st = low_battery;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_PWR_PVDCallback+0x48>)
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	701a      	strb	r2, [r3, #0]
		button_off();
 8000c60:	f7ff fc64 	bl	800052c <button_off>
		reset_led_satus();
 8000c64:	f7ff fca8 	bl	80005b8 <reset_led_satus>
		set_brightness(0);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fc33 	bl	80004d4 <set_brightness>
		HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
		st = idle;
		set_brightness(0);
		button_on();
	}
}
 8000c6e:	e00b      	b.n	8000c88 <HAL_PWR_PVDCallback+0x3c>
		HAL_LPTIM_TimeOut_Stop_IT(&hlptim1);
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_PWR_PVDCallback+0x4c>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fd5a 	bl	800172c <HAL_LPTIM_TimeOut_Stop_IT>
		st = idle;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_PWR_PVDCallback+0x48>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		set_brightness(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fc28 	bl	80004d4 <set_brightness>
		button_on();
 8000c84:	f7ff fc46 	bl	8000514 <button_on>
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	40007000 	.word	0x40007000
 8000c94:	200000a6 	.word	0x200000a6
 8000c98:	2000002c 	.word	0x2000002c

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_MspInit+0x34>)
 8000cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x34>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_MspInit+0x34>)
 8000cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_MspInit+0x34>)
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	0549      	lsls	r1, r1, #21
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fa3e 	bl	800114c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 fa50 	bl	8001176 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_LPTIM_MspInit+0x38>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10e      	bne.n	8000d10 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_LPTIM_MspInit+0x3c>)
 8000cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_LPTIM_MspInit+0x3c>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0609      	lsls	r1, r1, #24
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	200d      	movs	r0, #13
 8000d06:	f000 fa21 	bl	800114c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000d0a:	200d      	movs	r0, #13
 8000d0c:	f000 fa33 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40007c00 	.word	0x40007c00
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d105      	bne.n	8000d40 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_TIM_Base_MspInit+0x28>)
 8000d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_TIM_Base_MspInit+0x28>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	240c      	movs	r4, #12
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2314      	movs	r3, #20
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f002 fbe6 	bl	8003530 <memset>
  if(htim->Instance==TIM2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d122      	bne.n	8000db6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_TIM_MspPostInit+0x74>)
 8000d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_TIM_MspPostInit+0x74>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_TIM_MspPostInit+0x74>)
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	2201      	movs	r2, #1
 8000d82:	4013      	ands	r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d88:	0021      	movs	r1, r4
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2202      	movs	r2, #2
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2202      	movs	r2, #2
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	23a0      	movs	r3, #160	; 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 f9fd 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b009      	add	sp, #36	; 0x24
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f8c4 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tic++;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Handler+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <SysTick_Handler+0x1c>)
 8000df6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	200000a7 	.word	0x200000a7

08000e04 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000e08:	f000 ffc8 	bl	8001d9c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e16:	2020      	movs	r0, #32
 8000e18:	f000 fb6a 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <LPTIM1_IRQHandler+0x14>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fcb8 	bl	80017a0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	2000002c 	.word	0x2000002c

08000e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e4a:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <LoopForever+0x6>)
    LDR R1, [R0]
 8000e4e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e50:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <LoopForever+0xa>)
    CMP R1, R2
 8000e54:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e56:	d105      	bne.n	8000e64 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e5a:	4913      	ldr	r1, [pc, #76]	; (8000ea8 <LoopForever+0x12>)
    STR R1, [R0]
 8000e5c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e5e:	4813      	ldr	r0, [pc, #76]	; (8000eac <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e60:	4913      	ldr	r1, [pc, #76]	; (8000eb0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e62:	6001      	str	r1, [r0, #0]

08000e64 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e66:	4914      	ldr	r1, [pc, #80]	; (8000eb8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <LoopForever+0x26>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e7c:	4c11      	ldr	r4, [pc, #68]	; (8000ec4 <LoopForever+0x2e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 fb2b 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fd2b 	bl	80008ec <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
   ldr   r0, =_estack
 8000e98:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000e9c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ea0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000ea4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000ea8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000eac:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000eb0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ebc:	0800359c 	.word	0x0800359c
  ldr r2, =_sbss
 8000ec0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ec4:	200000ac 	.word	0x200000ac

08000ec8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_COMP_IRQHandler>
	...

08000ecc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x3c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Init+0x3c>)
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f811 	bl	8000f0c <HAL_InitTick>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e001      	b.n	8000efa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef6:	f7ff fed7 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f16:	681c      	ldr	r4, [r3, #0]
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_InitTick+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	23fa      	movs	r3, #250	; 0xfa
 8000f20:	0098      	lsls	r0, r3, #2
 8000f22:	f7ff f8f1 	bl	8000108 <__udivsi3>
 8000f26:	0003      	movs	r3, r0
 8000f28:	0019      	movs	r1, r3
 8000f2a:	0020      	movs	r0, r4
 8000f2c:	f7ff f8ec 	bl	8000108 <__udivsi3>
 8000f30:	0003      	movs	r3, r0
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f92f 	bl	8001196 <HAL_SYSTICK_Config>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e00f      	b.n	8000f60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d80b      	bhi.n	8000f5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	425b      	negs	r3, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 f8fc 	bl	800114c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_InitTick+0x64>)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b003      	add	sp, #12
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	20000008 	.word	0x20000008

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x1c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x20>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	18d2      	adds	r2, r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_IncTick+0x20>)
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	2000000c 	.word	0x2000000c
 8000f94:	200000a8 	.word	0x200000a8

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <HAL_GetTick+0x10>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	200000a8 	.word	0x200000a8

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff fff0 	bl	8000f98 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	001a      	movs	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	189b      	adds	r3, r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	f7ff ffe0 	bl	8000f98 <HAL_GetTick>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b004      	add	sp, #16
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b7f      	cmp	r3, #127	; 0x7f
 8001006:	d809      	bhi.n	800101c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	001a      	movs	r2, r3
 800100e:	231f      	movs	r3, #31
 8001010:	401a      	ands	r2, r3
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_EnableIRQ+0x30>)
 8001014:	2101      	movs	r1, #1
 8001016:	4091      	lsls	r1, r2
 8001018:	000a      	movs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
  }
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	0002      	movs	r2, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b7f      	cmp	r3, #127	; 0x7f
 800103c:	d828      	bhi.n	8001090 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <__NVIC_SetPriority+0xd4>)
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	33c0      	adds	r3, #192	; 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	589b      	ldr	r3, [r3, r2]
 800104e:	1dfa      	adds	r2, r7, #7
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	0011      	movs	r1, r2
 8001054:	2203      	movs	r2, #3
 8001056:	400a      	ands	r2, r1
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	21ff      	movs	r1, #255	; 0xff
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	43d2      	mvns	r2, r2
 8001062:	401a      	ands	r2, r3
 8001064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	22ff      	movs	r2, #255	; 0xff
 800106c:	401a      	ands	r2, r3
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	2303      	movs	r3, #3
 8001076:	4003      	ands	r3, r0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107c:	481f      	ldr	r0, [pc, #124]	; (80010fc <__NVIC_SetPriority+0xd4>)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	430a      	orrs	r2, r1
 8001088:	33c0      	adds	r3, #192	; 0xc0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800108e:	e031      	b.n	80010f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <__NVIC_SetPriority+0xd8>)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	0019      	movs	r1, r3
 8001098:	230f      	movs	r3, #15
 800109a:	400b      	ands	r3, r1
 800109c:	3b08      	subs	r3, #8
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3306      	adds	r3, #6
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	18d3      	adds	r3, r2, r3
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	2203      	movs	r2, #3
 80010b2:	400a      	ands	r2, r1
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	21ff      	movs	r1, #255	; 0xff
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	43d2      	mvns	r2, r2
 80010be:	401a      	ands	r2, r3
 80010c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	401a      	ands	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0018      	movs	r0, r3
 80010d0:	2303      	movs	r3, #3
 80010d2:	4003      	ands	r3, r0
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <__NVIC_SetPriority+0xd8>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001c      	movs	r4, r3
 80010e0:	230f      	movs	r3, #15
 80010e2:	4023      	ands	r3, r4
 80010e4:	3b08      	subs	r3, #8
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	430a      	orrs	r2, r1
 80010ea:	3306      	adds	r3, #6
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	18c3      	adds	r3, r0, r3
 80010f0:	3304      	adds	r3, #4
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b003      	add	sp, #12
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	1e5a      	subs	r2, r3, #1
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	045b      	lsls	r3, r3, #17
 8001114:	429a      	cmp	r2, r3
 8001116:	d301      	bcc.n	800111c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001118:	2301      	movs	r3, #1
 800111a:	e010      	b.n	800113e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <SysTick_Config+0x44>)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	3a01      	subs	r2, #1
 8001122:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001124:	2301      	movs	r3, #1
 8001126:	425b      	negs	r3, r3
 8001128:	2103      	movs	r1, #3
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ff7c 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x44>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x44>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	210f      	movs	r1, #15
 8001158:	187b      	adds	r3, r7, r1
 800115a:	1c02      	adds	r2, r0, #0
 800115c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	187b      	adds	r3, r7, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	0002      	movs	r2, r0
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff ff33 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff ffaf 	bl	8001104 <SysTick_Config>
 80011a6:	0003      	movs	r3, r0
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011c6:	e143      	b.n	8001450 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4091      	lsls	r1, r2
 80011d2:	000a      	movs	r2, r1
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <HAL_GPIO_Init+0x30>
 80011de:	e134      	b.n	800144a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d130      	bne.n	800125a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	43da      	mvns	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	2201      	movs	r2, #1
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	2b03      	cmp	r3, #3
 8001264:	d017      	beq.n	8001296 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2207      	movs	r2, #7
 80012b4:	4013      	ands	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2107      	movs	r1, #7
 80012ce:	400b      	ands	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	6939      	ldr	r1, [r7, #16]
 80012e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	401a      	ands	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_GPIO_Init+0x17c>
 800132a:	e08e      	b.n	800144a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001330:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001338:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_GPIO_Init+0x2bc>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	589b      	ldr	r3, [r3, r2]
 8001344:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2203      	movs	r2, #3
 800134a:	4013      	ands	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	23a0      	movs	r3, #160	; 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	429a      	cmp	r2, r3
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x1d2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a41      	ldr	r2, [pc, #260]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x1ce>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a40      	ldr	r2, [pc, #256]	; (8001474 <HAL_GPIO_Init+0x2c4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x1ca>
 8001376:	2302      	movs	r3, #2
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x1d4>
 800137a:	2306      	movs	r3, #6
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x1d4>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x1d4>
 8001382:	2300      	movs	r3, #0
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	2103      	movs	r1, #3
 8001388:	400a      	ands	r2, r1
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x2bc>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	025b      	lsls	r3, r3, #9
 80013ba:	4013      	ands	r3, r2
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43da      	mvns	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	029b      	lsls	r3, r3, #10
 80013e4:	4013      	ands	r3, r2
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	035b      	lsls	r3, r3, #13
 800140e:	4013      	ands	r3, r2
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43da      	mvns	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	4013      	ands	r3, r2
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	40da      	lsrs	r2, r3
 8001458:	1e13      	subs	r3, r2, #0
 800145a:	d000      	beq.n	800145e <HAL_GPIO_Init+0x2ae>
 800145c:	e6b4      	b.n	80011c8 <HAL_GPIO_Init+0x18>
  }
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	50000400 	.word	0x50000400
 8001474:	50000800 	.word	0x50000800
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	000a      	movs	r2, r1
 8001486:	1cbb      	adds	r3, r7, #2
 8001488:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	1cba      	adds	r2, r7, #2
 8001490:	8812      	ldrh	r2, [r2, #0]
 8001492:	4013      	ands	r3, r2
 8001494:	d004      	beq.n	80014a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001496:	230f      	movs	r3, #15
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e003      	b.n	80014a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014a8:	230f      	movs	r3, #15
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	781b      	ldrb	r3, [r3, #0]
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	0008      	movs	r0, r1
 80014c0:	0011      	movs	r1, r2
 80014c2:	1cbb      	adds	r3, r7, #2
 80014c4:	1c02      	adds	r2, r0, #0
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	1c7b      	adds	r3, r7, #1
 80014ca:	1c0a      	adds	r2, r1, #0
 80014cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ce:	1c7b      	adds	r3, r7, #1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	1cbb      	adds	r3, r7, #2
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014de:	e003      	b.n	80014e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	0002      	movs	r2, r0
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	1dba      	adds	r2, r7, #6
 8001502:	8812      	ldrh	r2, [r2, #0]
 8001504:	4013      	ands	r3, r2
 8001506:	d008      	beq.n	800151a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800150a:	1dba      	adds	r2, r7, #6
 800150c:	8812      	ldrh	r2, [r2, #0]
 800150e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fb7f 	bl	8000c18 <HAL_GPIO_EXTI_Callback>
  }
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e078      	b.n	800162c <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	222e      	movs	r2, #46	; 0x2e
 800153e:	5c9b      	ldrb	r3, [r3, r2]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d107      	bne.n	8001556 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	222d      	movs	r2, #45	; 0x2d
 800154a:	2100      	movs	r1, #0
 800154c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff fbc5 	bl	8000ce0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	222e      	movs	r2, #46	; 0x2e
 800155a:	2102      	movs	r1, #2
 800155c:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	041b      	lsls	r3, r3, #16
 8001576:	429a      	cmp	r2, r3
 8001578:	d103      	bne.n	8001582 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	221e      	movs	r2, #30
 800157e:	4393      	bics	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <HAL_LPTIM_Init+0x10c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d003      	beq.n	8001594 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_LPTIM_Init+0x110>)
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <HAL_LPTIM_Init+0x114>)
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80015a4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80015aa:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80015b0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80015b6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80015ce:	4313      	orrs	r3, r2
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d107      	bne.n	80015fa <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80015f2:	4313      	orrs	r3, r2
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_LPTIM_Init+0x10c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00a      	beq.n	800161a <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800160c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001612:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	222e      	movs	r2, #46	; 0x2e
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0000ffff 	.word	0x0000ffff
 8001638:	ffff1f3f 	.word	0xffff1f3f
 800163c:	ff19f1fe 	.word	0xff19f1fe

08001640 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	222e      	movs	r2, #46	; 0x2e
 8001650:	2102      	movs	r1, #2
 8001652:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0589      	lsls	r1, r1, #22
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0309      	lsls	r1, r1, #12
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2210      	movs	r2, #16
 800168a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2110      	movs	r1, #16
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f967 	bl	800196c <LPTIM_WaitForFlag>
 800169e:	0003      	movs	r3, r0
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d101      	bne.n	80016a8 <HAL_LPTIM_TimeOut_Start_IT+0x68>
  {
    return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e03b      	b.n	8001720 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2208      	movs	r2, #8
 80016ae:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2108      	movs	r1, #8
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f955 	bl	800196c <LPTIM_WaitForFlag>
 80016c2:	0003      	movs	r3, r0
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d101      	bne.n	80016cc <HAL_LPTIM_TimeOut_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e029      	b.n	8001720 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 f984 	bl	80019dc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 f93c 	bl	8001954 <HAL_LPTIM_GetState>
 80016dc:	0003      	movs	r3, r0
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d101      	bne.n	80016e6 <HAL_LPTIM_TimeOut_Start_IT+0xa6>
  {
    return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e01c      	b.n	8001720 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2104      	movs	r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	222e      	movs	r2, #46	; 0x2e
 800171a:	2101      	movs	r1, #1
 800171c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_LPTIM_TimeOut_Stop_IT>:
  * @brief  Stop the Timeout function in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	222e      	movs	r2, #46	; 0x2e
 8001738:	2102      	movs	r1, #2
 800173a:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_LPTIM_TimeOut_Stop_IT+0x68>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_LPTIM_TimeOut_Stop_IT+0x68>)
 8001742:	4915      	ldr	r1, [pc, #84]	; (8001798 <HAL_LPTIM_TimeOut_Stop_IT+0x6c>)
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f946 	bl	80019dc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	0018      	movs	r0, r3
 8001754:	f000 f8fe 	bl	8001954 <HAL_LPTIM_GetState>
 8001758:	0003      	movs	r3, r0
 800175a:	2b03      	cmp	r3, #3
 800175c:	d101      	bne.n	8001762 <HAL_LPTIM_TimeOut_Stop_IT+0x36>
  {
    return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e014      	b.n	800178c <HAL_LPTIM_TimeOut_Stop_IT+0x60>
  }

  /* Reset TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_TIMOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	490b      	ldr	r1, [pc, #44]	; (800179c <HAL_LPTIM_TimeOut_Stop_IT+0x70>)
 800176e:	400a      	ands	r2, r1
 8001770:	60da      	str	r2, [r3, #12]

  /* Disable Compare match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_CMPM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	438a      	bics	r2, r1
 8001780:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	222e      	movs	r2, #46	; 0x2e
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40010400 	.word	0x40010400
 8001798:	dfffffff 	.word	0xdfffffff
 800179c:	fff7ffff 	.word	0xfff7ffff

080017a0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10e      	bne.n	80017d4 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f888 	bl	80018e4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d10e      	bne.n	8001800 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d107      	bne.n	8001800 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2202      	movs	r2, #2
 80017f6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f87a 	bl	80018f4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	2b04      	cmp	r3, #4
 800180c:	d10e      	bne.n	800182c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2204      	movs	r2, #4
 8001816:	4013      	ands	r3, r2
 8001818:	2b04      	cmp	r3, #4
 800181a:	d107      	bne.n	800182c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2204      	movs	r2, #4
 8001822:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f000 f86c 	bl	8001904 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2208      	movs	r2, #8
 8001834:	4013      	ands	r3, r2
 8001836:	2b08      	cmp	r3, #8
 8001838:	d10e      	bne.n	8001858 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2208      	movs	r2, #8
 8001842:	4013      	ands	r3, r2
 8001844:	2b08      	cmp	r3, #8
 8001846:	d107      	bne.n	8001858 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2208      	movs	r2, #8
 800184e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f85e 	bl	8001914 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2210      	movs	r2, #16
 8001860:	4013      	ands	r3, r2
 8001862:	2b10      	cmp	r3, #16
 8001864:	d10e      	bne.n	8001884 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2210      	movs	r2, #16
 800186e:	4013      	ands	r3, r2
 8001870:	2b10      	cmp	r3, #16
 8001872:	d107      	bne.n	8001884 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2210      	movs	r2, #16
 800187a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0018      	movs	r0, r3
 8001880:	f000 f850 	bl	8001924 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2220      	movs	r2, #32
 800188c:	4013      	ands	r3, r2
 800188e:	2b20      	cmp	r3, #32
 8001890:	d10e      	bne.n	80018b0 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2220      	movs	r2, #32
 800189a:	4013      	ands	r3, r2
 800189c:	2b20      	cmp	r3, #32
 800189e:	d107      	bne.n	80018b0 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2220      	movs	r2, #32
 80018a6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 f842 	bl	8001934 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d10e      	bne.n	80018dc <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d107      	bne.n	80018dc <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2240      	movs	r2, #64	; 0x40
 80018d2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 f834 	bl	8001944 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800194c:	46c0      	nop			; (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	222e      	movs	r2, #46	; 0x2e
 8001960:	5c9b      	ldrb	r3, [r3, r2]
 8001962:	b2db      	uxtb	r3, r3
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001976:	230f      	movs	r3, #15
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <LPTIM_WaitForFlag+0x68>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4915      	ldr	r1, [pc, #84]	; (80019d8 <LPTIM_WaitForFlag+0x6c>)
 8001984:	0018      	movs	r0, r3
 8001986:	f7fe fbbf 	bl	8000108 <__udivsi3>
 800198a:	0003      	movs	r3, r0
 800198c:	001a      	movs	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	189b      	adds	r3, r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80019a8:	230f      	movs	r3, #15
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2203      	movs	r2, #3
 80019ae:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4013      	ands	r3, r2
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d002      	beq.n	80019c6 <LPTIM_WaitForFlag+0x5a>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ea      	bne.n	800199c <LPTIM_WaitForFlag+0x30>

  return result;
 80019c6:	230f      	movs	r3, #15
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	781b      	ldrb	r3, [r3, #0]
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000004 	.word	0x20000004
 80019d8:	00004e20 	.word	0x00004e20

080019dc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	001a      	movs	r2, r3
 80019f2:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <LPTIM_Disable+0x16c>)
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d106      	bne.n	8001a06 <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80019f8:	4b54      	ldr	r3, [pc, #336]	; (8001b4c <LPTIM_Disable+0x170>)
 80019fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fc:	23c0      	movs	r3, #192	; 0xc0
 80019fe:	031b      	lsls	r3, r3, #12
 8001a00:	4013      	ands	r3, r2
 8001a02:	61fb      	str	r3, [r7, #28]
      break;
 8001a04:	e000      	b.n	8001a08 <LPTIM_Disable+0x2c>
    default:
      break;
 8001a06:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <LPTIM_Disable+0x16c>)
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10d      	bne.n	8001a50 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001a34:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <LPTIM_Disable+0x170>)
 8001a36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a38:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <LPTIM_Disable+0x170>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0609      	lsls	r1, r1, #24
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <LPTIM_Disable+0x170>)
 8001a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <LPTIM_Disable+0x170>)
 8001a48:	0052      	lsls	r2, r2, #1
 8001a4a:	0852      	lsrs	r2, r2, #1
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001a4e:	e000      	b.n	8001a52 <LPTIM_Disable+0x76>
    default:
      break;
 8001a50:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <LPTIM_Disable+0x82>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d05b      	beq.n	8001b16 <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	001a      	movs	r2, r3
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <LPTIM_Disable+0x16c>)
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d106      	bne.n	8001a78 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <LPTIM_Disable+0x170>)
 8001a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <LPTIM_Disable+0x170>)
 8001a70:	4937      	ldr	r1, [pc, #220]	; (8001b50 <LPTIM_Disable+0x174>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8001a76:	e000      	b.n	8001a7a <LPTIM_Disable+0x9e>
      default:
        break;
 8001a78:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01b      	beq.n	8001ab8 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ff65 	bl	800196c <LPTIM_WaitForFlag>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d103      	bne.n	8001ab0 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	222e      	movs	r2, #46	; 0x2e
 8001aac:	2103      	movs	r1, #3
 8001aae:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01b      	beq.n	8001af6 <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	430a      	orrs	r2, r1
 8001acc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2110      	movs	r1, #16
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7ff ff46 	bl	800196c <LPTIM_WaitForFlag>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d103      	bne.n	8001aee <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	222e      	movs	r2, #46	; 0x2e
 8001aea:	2103      	movs	r1, #3
 8001aec:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2210      	movs	r2, #16
 8001af4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	001a      	movs	r2, r3
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <LPTIM_Disable+0x16c>)
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10b      	bne.n	8001b1a <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <LPTIM_Disable+0x170>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <LPTIM_Disable+0x174>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <LPTIM_Disable+0x170>)
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8001b14:	e002      	b.n	8001b1c <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	e000      	b.n	8001b1c <LPTIM_Disable+0x140>
        break;
 8001b1a:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2101      	movs	r1, #1
 8001b28:	438a      	bics	r2, r1
 8001b2a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b3c:	b662      	cpsie	i
}
 8001b3e:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b008      	add	sp, #32
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40007c00 	.word	0x40007c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fff3ffff 	.word	0xfff3ffff

08001b54 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_PWR_ConfigPVD+0xb8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	22e0      	movs	r2, #224	; 0xe0
 8001b62:	4393      	bics	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_PWR_ConfigPVD+0xb8>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_PWR_ConfigPVD+0xc0>)
 8001b78:	400a      	ands	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b82:	4924      	ldr	r1, [pc, #144]	; (8001c14 <HAL_PWR_ConfigPVD+0xc0>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b8e:	4921      	ldr	r1, [pc, #132]	; (8001c14 <HAL_PWR_ConfigPVD+0xc0>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001b9a:	491e      	ldr	r1, [pc, #120]	; (8001c14 <HAL_PWR_ConfigPVD+0xc0>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d006      	beq.n	8001bba <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	0249      	lsls	r1, r1, #9
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d006      	beq.n	8001bd4 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0249      	lsls	r1, r1, #9
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d006      	beq.n	8001bec <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0249      	lsls	r1, r1, #9
 8001be8:	430a      	orrs	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d006      	beq.n	8001c04 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_PWR_ConfigPVD+0xbc>)
 8001bfc:	2180      	movs	r1, #128	; 0x80
 8001bfe:	0249      	lsls	r1, r1, #9
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]
  }
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	40010400 	.word	0x40010400
 8001c14:	fffeffff 	.word	0xfffeffff

08001c18 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_PWR_EnablePVD+0x18>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_PWR_EnablePVD+0x18>)
 8001c22:	2110      	movs	r1, #16
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	1cfb      	adds	r3, r7, #3
 8001c40:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d008      	beq.n	8001c74 <HAL_PWR_EnterSLEEPMode+0x40>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001c6e:	491b      	ldr	r1, [pc, #108]	; (8001cdc <HAL_PWR_EnterSLEEPMode+0xa8>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4393      	bics	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001c96:	2104      	movs	r1, #4
 8001c98:	438a      	bics	r2, r1
 8001c9a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001c9c:	1cfb      	adds	r3, r7, #3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001ca4:	bf30      	wfi
 8001ca6:	e002      	b.n	8001cae <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001ca8:	bf40      	sev
    __WFE();
 8001caa:	bf20      	wfe
    __WFE();
 8001cac:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <HAL_PWR_EnterSLEEPMode+0x94>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0089      	lsls	r1, r1, #2
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8001cc8:	46c0      	nop			; (mov r8, r8)

}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b006      	add	sp, #24
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	fffffdff 	.word	0xfffffdff
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	000a      	movs	r2, r1
 8001cee:	1cfb      	adds	r3, r7, #3
 8001cf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_PWR_EnterSTOPMode+0xac>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2201      	movs	r2, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_PWR_EnterSTOPMode+0x40>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d1e:	491d      	ldr	r1, [pc, #116]	; (8001d94 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4393      	bics	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d46:	2104      	movs	r1, #4
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001d4c:	1cfb      	adds	r3, r7, #3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001d54:	bf30      	wfi
 8001d56:	e002      	b.n	8001d5e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001d58:	bf40      	sev
    __WFE();
 8001d5a:	bf20      	wfe
    __WFE();
 8001d5c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001d64:	2104      	movs	r1, #4
 8001d66:	438a      	bics	r2, r1
 8001d68:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_PWR_EnterSTOPMode+0xa0>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0089      	lsls	r1, r1, #2
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
  }
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b006      	add	sp, #24
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	40010000 	.word	0x40010000
 8001d94:	fffffdff 	.word	0xfffffdff
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <HAL_PWR_PVD_IRQHandler+0x24>)
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	4013      	ands	r3, r2
 8001daa:	d005      	beq.n	8001db8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001dac:	f7fe ff4e 	bl	8000c4c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_PWR_PVD_IRQHandler+0x24>)
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	0252      	lsls	r2, r2, #9
 8001db6:	615a      	str	r2, [r3, #20]
  }
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f000 fb6c 	bl	80024b0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd8:	4bc8      	ldr	r3, [pc, #800]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	220c      	movs	r2, #12
 8001dde:	4013      	ands	r3, r2
 8001de0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de2:	4bc6      	ldr	r3, [pc, #792]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	025b      	lsls	r3, r3, #9
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x36>
 8001df8:	e07d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d007      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d112      	bne.n	8001e2c <HAL_RCC_OscConfig+0x68>
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4bba      	ldr	r3, [pc, #744]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <HAL_RCC_OscConfig+0x5a>
 8001e1c:	e06a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x130>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d166      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f000 fb42 	bl	80024b0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	025b      	lsls	r3, r3, #9
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x84>
 8001e38:	4bb0      	ldr	r3, [pc, #704]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4baf      	ldr	r3, [pc, #700]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	0249      	lsls	r1, r1, #9
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e027      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	23a0      	movs	r3, #160	; 0xa0
 8001e4e:	02db      	lsls	r3, r3, #11
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10e      	bne.n	8001e72 <HAL_RCC_OscConfig+0xae>
 8001e54:	4ba9      	ldr	r3, [pc, #676]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4ba8      	ldr	r3, [pc, #672]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	02c9      	lsls	r1, r1, #11
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	4ba6      	ldr	r3, [pc, #664]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4ba5      	ldr	r3, [pc, #660]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0249      	lsls	r1, r1, #9
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e012      	b.n	8001e98 <HAL_RCC_OscConfig+0xd4>
 8001e72:	4ba2      	ldr	r3, [pc, #648]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4ba1      	ldr	r3, [pc, #644]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e78:	49a1      	ldr	r1, [pc, #644]	; (8002100 <HAL_RCC_OscConfig+0x33c>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	4b9f      	ldr	r3, [pc, #636]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4b9b      	ldr	r3, [pc, #620]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b9a      	ldr	r3, [pc, #616]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001e92:	499c      	ldr	r1, [pc, #624]	; (8002104 <HAL_RCC_OscConfig+0x340>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d014      	beq.n	8001eca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f87a 	bl	8000f98 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f875 	bl	8000f98 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e2f9      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ebc:	4b8f      	ldr	r3, [pc, #572]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0xe6>
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff f865 	bl	8000f98 <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f860 	bl	8000f98 <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e2e4      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x110>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d100      	bne.n	8001f02 <HAL_RCC_OscConfig+0x13e>
 8001f00:	e099      	b.n	8002036 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001f10:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b79      	ldr	r3, [pc, #484]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f16:	2120      	movs	r1, #32
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	2220      	movs	r2, #32
 8001f20:	4393      	bics	r3, r2
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	d13e      	bne.n	8001fae <HAL_RCC_OscConfig+0x1ea>
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d13b      	bne.n	8001fae <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f36:	4b71      	ldr	r3, [pc, #452]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_RCC_OscConfig+0x186>
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e2b2      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	; (8002108 <HAL_RCC_OscConfig+0x344>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	021a      	lsls	r2, r3, #8
 8001f5a:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2209      	movs	r2, #9
 8001f66:	4393      	bics	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 fbeb 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8001f76:	0001      	movs	r1, r0
 8001f78:	4b60      	ldr	r3, [pc, #384]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	220f      	movs	r2, #15
 8001f80:	4013      	ands	r3, r2
 8001f82:	4a62      	ldr	r2, [pc, #392]	; (800210c <HAL_RCC_OscConfig+0x348>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	000a      	movs	r2, r1
 8001f88:	40da      	lsrs	r2, r3
 8001f8a:	4b61      	ldr	r3, [pc, #388]	; (8002110 <HAL_RCC_OscConfig+0x34c>)
 8001f8c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001f8e:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x350>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2513      	movs	r5, #19
 8001f94:	197c      	adds	r4, r7, r5
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7fe ffb8 	bl	8000f0c <HAL_InitTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fa0:	197b      	adds	r3, r7, r5
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d046      	beq.n	8002036 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001fa8:	197b      	adds	r3, r7, r5
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	e280      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d027      	beq.n	8002004 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fb4:	4b51      	ldr	r3, [pc, #324]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2209      	movs	r2, #9
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ffe7 	bl	8000f98 <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7fe ffe2 	bl	8000f98 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e266      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f1      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a45      	ldr	r2, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x344>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	021a      	lsls	r2, r3, #8
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	e018      	b.n	8002036 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 800200a:	2101      	movs	r1, #1
 800200c:	438a      	bics	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe ffc2 	bl	8000f98 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7fe ffbd 	bl	8000f98 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e241      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d1f1      	bne.n	800201a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2210      	movs	r2, #16
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x27e>
 8002040:	e0a1      	b.n	8002186 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d140      	bne.n	80020ca <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x29c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e227      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <HAL_RCC_OscConfig+0x354>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	0a19      	lsrs	r1, r3, #8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	061a      	lsls	r2, r3, #24
 8002082:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	0b5b      	lsrs	r3, r3, #13
 800208e:	3301      	adds	r3, #1
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	0212      	lsls	r2, r2, #8
 8002094:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	210f      	movs	r1, #15
 800209e:	400b      	ands	r3, r1
 80020a0:	491a      	ldr	r1, [pc, #104]	; (800210c <HAL_RCC_OscConfig+0x348>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_RCC_OscConfig+0x34c>)
 80020a8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_RCC_OscConfig+0x350>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2513      	movs	r5, #19
 80020b0:	197c      	adds	r4, r7, r5
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7fe ff2a 	bl	8000f0c <HAL_InitTick>
 80020b8:	0003      	movs	r3, r0
 80020ba:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020bc:	197b      	adds	r3, r7, r5
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d060      	beq.n	8002186 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80020c4:	197b      	adds	r3, r7, r5
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	e1f2      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03f      	beq.n	8002152 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_OscConfig+0x338>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0049      	lsls	r1, r1, #1
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ff5a 	bl	8000f98 <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020e8:	e018      	b.n	800211c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ea:	f7fe ff55 	bl	8000f98 <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d911      	bls.n	800211c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1d9      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
 80020fc:	40021000 	.word	0x40021000
 8002100:	fffeffff 	.word	0xfffeffff
 8002104:	fffbffff 	.word	0xfffbffff
 8002108:	ffffe0ff 	.word	0xffffe0ff
 800210c:	08003570 	.word	0x08003570
 8002110:	20000004 	.word	0x20000004
 8002114:	20000008 	.word	0x20000008
 8002118:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800211c:	4bc9      	ldr	r3, [pc, #804]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d0e0      	beq.n	80020ea <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002128:	4bc6      	ldr	r3, [pc, #792]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4ac6      	ldr	r2, [pc, #792]	; (8002448 <HAL_RCC_OscConfig+0x684>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	4bc3      	ldr	r3, [pc, #780]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213c:	4bc1      	ldr	r3, [pc, #772]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	0a19      	lsrs	r1, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	061a      	lsls	r2, r3, #24
 800214a:	4bbe      	ldr	r3, [pc, #760]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800214c:	430a      	orrs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e019      	b.n	8002186 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002152:	4bbc      	ldr	r3, [pc, #752]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4bbb      	ldr	r3, [pc, #748]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002158:	49bc      	ldr	r1, [pc, #752]	; (800244c <HAL_RCC_OscConfig+0x688>)
 800215a:	400a      	ands	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe ff1b 	bl	8000f98 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002168:	f7fe ff16 	bl	8000f98 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e19a      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800217a:	4bb2      	ldr	r3, [pc, #712]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4013      	ands	r3, r2
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2208      	movs	r2, #8
 800218c:	4013      	ands	r3, r2
 800218e:	d036      	beq.n	80021fe <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d019      	beq.n	80021cc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002198:	4baa      	ldr	r3, [pc, #680]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800219a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800219c:	4ba9      	ldr	r3, [pc, #676]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800219e:	2101      	movs	r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7fe fef8 	bl	8000f98 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ae:	f7fe fef3 	bl	8000f98 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e177      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021c0:	4ba0      	ldr	r3, [pc, #640]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80021c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0f1      	beq.n	80021ae <HAL_RCC_OscConfig+0x3ea>
 80021ca:	e018      	b.n	80021fe <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021cc:	4b9d      	ldr	r3, [pc, #628]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80021ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d0:	4b9c      	ldr	r3, [pc, #624]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	438a      	bics	r2, r1
 80021d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fede 	bl	8000f98 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fed9 	bl	8000f98 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e15d      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f4:	4b93      	ldr	r3, [pc, #588]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d1f1      	bne.n	80021e2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2204      	movs	r2, #4
 8002204:	4013      	ands	r3, r2
 8002206:	d100      	bne.n	800220a <HAL_RCC_OscConfig+0x446>
 8002208:	e0ae      	b.n	8002368 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2023      	movs	r0, #35	; 0x23
 800220c:	183b      	adds	r3, r7, r0
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002212:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	055b      	lsls	r3, r3, #21
 800221a:	4013      	ands	r3, r2
 800221c:	d109      	bne.n	8002232 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002222:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0549      	lsls	r1, r1, #21
 8002228:	430a      	orrs	r2, r1
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800222c:	183b      	adds	r3, r7, r0
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b87      	ldr	r3, [pc, #540]	; (8002450 <HAL_RCC_OscConfig+0x68c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4013      	ands	r3, r2
 800223c:	d11a      	bne.n	8002274 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_RCC_OscConfig+0x68c>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b83      	ldr	r3, [pc, #524]	; (8002450 <HAL_RCC_OscConfig+0x68c>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0049      	lsls	r1, r1, #1
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224c:	f7fe fea4 	bl	8000f98 <HAL_GetTick>
 8002250:	0003      	movs	r3, r0
 8002252:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7fe fe9f 	bl	8000f98 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e123      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b79      	ldr	r3, [pc, #484]	; (8002450 <HAL_RCC_OscConfig+0x68c>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4013      	ands	r3, r2
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	429a      	cmp	r2, r3
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x4cc>
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002284:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	0049      	lsls	r1, r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	651a      	str	r2, [r3, #80]	; 0x50
 800228e:	e031      	b.n	80022f4 <HAL_RCC_OscConfig+0x530>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4ee>
 8002298:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800229a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800229c:	4b69      	ldr	r3, [pc, #420]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800229e:	496b      	ldr	r1, [pc, #428]	; (800244c <HAL_RCC_OscConfig+0x688>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	651a      	str	r2, [r3, #80]	; 0x50
 80022a4:	4b67      	ldr	r3, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a8:	4b66      	ldr	r3, [pc, #408]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022aa:	496a      	ldr	r1, [pc, #424]	; (8002454 <HAL_RCC_OscConfig+0x690>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	651a      	str	r2, [r3, #80]	; 0x50
 80022b0:	e020      	b.n	80022f4 <HAL_RCC_OscConfig+0x530>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	23a0      	movs	r3, #160	; 0xa0
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d10e      	bne.n	80022dc <HAL_RCC_OscConfig+0x518>
 80022be:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c2:	4b60      	ldr	r3, [pc, #384]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	00c9      	lsls	r1, r1, #3
 80022c8:	430a      	orrs	r2, r1
 80022ca:	651a      	str	r2, [r3, #80]	; 0x50
 80022cc:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022d0:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0049      	lsls	r1, r1, #1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	651a      	str	r2, [r3, #80]	; 0x50
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0x530>
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022e0:	4b58      	ldr	r3, [pc, #352]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022e2:	495a      	ldr	r1, [pc, #360]	; (800244c <HAL_RCC_OscConfig+0x688>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	651a      	str	r2, [r3, #80]	; 0x50
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ec:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80022ee:	4959      	ldr	r1, [pc, #356]	; (8002454 <HAL_RCC_OscConfig+0x690>)
 80022f0:	400a      	ands	r2, r1
 80022f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7fe fe4c 	bl	8000f98 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002304:	e009      	b.n	800231a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fe47 	bl	8000f98 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a51      	ldr	r2, [pc, #324]	; (8002458 <HAL_RCC_OscConfig+0x694>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0ca      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800231c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d0ef      	beq.n	8002306 <HAL_RCC_OscConfig+0x542>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7fe fe36 	bl	8000f98 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002330:	e009      	b.n	8002346 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe fe31 	bl	8000f98 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4a46      	ldr	r2, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x694>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0b4      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4013      	ands	r3, r2
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002352:	2323      	movs	r3, #35	; 0x23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 800235e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002362:	493e      	ldr	r1, [pc, #248]	; (800245c <HAL_RCC_OscConfig+0x698>)
 8002364:	400a      	ands	r2, r1
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x5ae>
 8002370:	e09d      	b.n	80024ae <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d100      	bne.n	800237a <HAL_RCC_OscConfig+0x5b6>
 8002378:	e076      	b.n	8002468 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2b02      	cmp	r3, #2
 8002380:	d145      	bne.n	800240e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002388:	4935      	ldr	r1, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x69c>)
 800238a:	400a      	ands	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe fe03 	bl	8000f98 <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fdfe 	bl	8000f98 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e082      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	049b      	lsls	r3, r3, #18
 80023b2:	4013      	ands	r3, r2
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x6a0>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	431a      	orrs	r2, r3
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0449      	lsls	r1, r1, #17
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fdd8 	bl	8000f98 <HAL_GetTick>
 80023e8:	0003      	movs	r3, r0
 80023ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fdd3 	bl	8000f98 <HAL_GetTick>
 80023f2:	0002      	movs	r2, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e057      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	049b      	lsls	r3, r3, #18
 8002408:	4013      	ands	r3, r2
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x62a>
 800240c:	e04f      	b.n	80024ae <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002414:	4912      	ldr	r1, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x69c>)
 8002416:	400a      	ands	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe fdbd 	bl	8000f98 <HAL_GetTick>
 800241e:	0003      	movs	r3, r0
 8002420:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fdb8 	bl	8000f98 <HAL_GetTick>
 8002428:	0002      	movs	r2, r0
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e03c      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002436:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_RCC_OscConfig+0x680>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	049b      	lsls	r3, r3, #18
 800243e:	4013      	ands	r3, r2
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x660>
 8002442:	e034      	b.n	80024ae <HAL_RCC_OscConfig+0x6ea>
 8002444:	40021000 	.word	0x40021000
 8002448:	ffff1fff 	.word	0xffff1fff
 800244c:	fffffeff 	.word	0xfffffeff
 8002450:	40007000 	.word	0x40007000
 8002454:	fffffbff 	.word	0xfffffbff
 8002458:	00001388 	.word	0x00001388
 800245c:	efffffff 	.word	0xefffffff
 8002460:	feffffff 	.word	0xfeffffff
 8002464:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_RCC_OscConfig+0x6f4>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	025b      	lsls	r3, r3, #9
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	429a      	cmp	r2, r3
 8002488:	d10f      	bne.n	80024aa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	23f0      	movs	r3, #240	; 0xf0
 800248e:	039b      	lsls	r3, r3, #14
 8002490:	401a      	ands	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	23c0      	movs	r3, #192	; 0xc0
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b00a      	add	sp, #40	; 0x28
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e128      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b96      	ldr	r3, [pc, #600]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d91e      	bls.n	800251c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b93      	ldr	r3, [pc, #588]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4393      	bics	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	4b90      	ldr	r3, [pc, #576]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024f0:	f7fe fd52 	bl	8000f98 <HAL_GetTick>
 80024f4:	0003      	movs	r3, r0
 80024f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f8:	e009      	b.n	800250e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fa:	f7fe fd4d 	bl	8000f98 <HAL_GetTick>
 80024fe:	0002      	movs	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <HAL_RCC_ClockConfig+0x274>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e109      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b87      	ldr	r3, [pc, #540]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d1ee      	bne.n	80024fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2202      	movs	r2, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d009      	beq.n	800253a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002526:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	22f0      	movs	r2, #240	; 0xf0
 800252c:	4393      	bics	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	4b7f      	ldr	r3, [pc, #508]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002536:	430a      	orrs	r2, r1
 8002538:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	4013      	ands	r3, r2
 8002542:	d100      	bne.n	8002546 <HAL_RCC_ClockConfig+0x8a>
 8002544:	e089      	b.n	800265a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254e:	4b79      	ldr	r3, [pc, #484]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	029b      	lsls	r3, r3, #10
 8002556:	4013      	ands	r3, r2
 8002558:	d120      	bne.n	800259c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0e1      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	049b      	lsls	r3, r3, #18
 800256e:	4013      	ands	r3, r2
 8002570:	d114      	bne.n	800259c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0d5      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d106      	bne.n	800258c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257e:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2204      	movs	r2, #4
 8002584:	4013      	ands	r3, r2
 8002586:	d109      	bne.n	800259c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0ca      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800258c:	4b69      	ldr	r3, [pc, #420]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0c2      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259c:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4393      	bics	r3, r2
 80025a4:	0019      	movs	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fcf2 	bl	8000f98 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d111      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	e009      	b.n	80025d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fce9 	bl	8000f98 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x274>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0a5      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d6:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	220c      	movs	r2, #12
 80025dc:	4013      	ands	r3, r2
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d1ef      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x106>
 80025e2:	e03a      	b.n	800265a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d111      	bne.n	8002610 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	e009      	b.n	8002602 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ee:	f7fe fcd3 	bl	8000f98 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4a4d      	ldr	r2, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x274>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e08f      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002602:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	220c      	movs	r2, #12
 8002608:	4013      	ands	r3, r2
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d1ef      	bne.n	80025ee <HAL_RCC_ClockConfig+0x132>
 800260e:	e024      	b.n	800265a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d11b      	bne.n	8002650 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002618:	e009      	b.n	800262e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261a:	f7fe fcbd 	bl	8000f98 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a42      	ldr	r2, [pc, #264]	; (8002730 <HAL_RCC_ClockConfig+0x274>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e079      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	220c      	movs	r2, #12
 8002634:	4013      	ands	r3, r2
 8002636:	2b04      	cmp	r3, #4
 8002638:	d1ef      	bne.n	800261a <HAL_RCC_ClockConfig+0x15e>
 800263a:	e00e      	b.n	800265a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fcac 	bl	8000f98 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	4a3a      	ldr	r2, [pc, #232]	; (8002730 <HAL_RCC_ClockConfig+0x274>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e068      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002650:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	220c      	movs	r2, #12
 8002656:	4013      	ands	r3, r2
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2201      	movs	r2, #1
 8002660:	4013      	ands	r3, r2
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d21e      	bcs.n	80026a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2201      	movs	r2, #1
 800266e:	4393      	bics	r3, r2
 8002670:	0019      	movs	r1, r3
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800267a:	f7fe fc8d 	bl	8000f98 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	e009      	b.n	8002698 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fc88 	bl	8000f98 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	4a28      	ldr	r2, [pc, #160]	; (8002730 <HAL_RCC_ClockConfig+0x274>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e044      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d1ee      	bne.n	8002684 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x27c>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4013      	ands	r3, r2
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a1a      	ldr	r2, [pc, #104]	; (800273c <HAL_RCC_ClockConfig+0x280>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	00da      	lsls	r2, r3, #3
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e4:	f000 f832 	bl	800274c <HAL_RCC_GetSysClockFreq>
 80026e8:	0001      	movs	r1, r0
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_ClockConfig+0x278>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	220f      	movs	r2, #15
 80026f2:	4013      	ands	r3, r2
 80026f4:	4a12      	ldr	r2, [pc, #72]	; (8002740 <HAL_RCC_ClockConfig+0x284>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	000a      	movs	r2, r1
 80026fa:	40da      	lsrs	r2, r3
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_ClockConfig+0x288>)
 80026fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_RCC_ClockConfig+0x28c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	250b      	movs	r5, #11
 8002706:	197c      	adds	r4, r7, r5
 8002708:	0018      	movs	r0, r3
 800270a:	f7fe fbff 	bl	8000f0c <HAL_InitTick>
 800270e:	0003      	movs	r3, r0
 8002710:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002712:	197b      	adds	r3, r7, r5
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800271a:	197b      	adds	r3, r7, r5
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	e000      	b.n	8002722 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bdb0      	pop	{r4, r5, r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	40022000 	.word	0x40022000
 8002730:	00001388 	.word	0x00001388
 8002734:	40021000 	.word	0x40021000
 8002738:	fffff8ff 	.word	0xfffff8ff
 800273c:	ffffc7ff 	.word	0xffffc7ff
 8002740:	08003570 	.word	0x08003570
 8002744:	20000004 	.word	0x20000004
 8002748:	20000008 	.word	0x20000008

0800274c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	230c      	movs	r3, #12
 800275c:	4013      	ands	r3, r2
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d014      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x40>
 8002762:	d900      	bls.n	8002766 <HAL_RCC_GetSysClockFreq+0x1a>
 8002764:	e07b      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x112>
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x24>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x3a>
 800276e:	e076      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002770:	4b44      	ldr	r3, [pc, #272]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2210      	movs	r2, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_GetSysClockFreq+0x13c>)
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800277e:	e07c      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCC_GetSysClockFreq+0x140>)
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002784:	e079      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_GetSysClockFreq+0x144>)
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800278a:	e076      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	0c9a      	lsrs	r2, r3, #18
 8002790:	230f      	movs	r3, #15
 8002792:	401a      	ands	r2, r3
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_RCC_GetSysClockFreq+0x148>)
 8002796:	5c9b      	ldrb	r3, [r3, r2]
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	0d9a      	lsrs	r2, r3, #22
 800279e:	2303      	movs	r3, #3
 80027a0:	4013      	ands	r3, r2
 80027a2:	3301      	adds	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	4013      	ands	r3, r2
 80027b0:	d01a      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	4a35      	ldr	r2, [pc, #212]	; (8002890 <HAL_RCC_GetSysClockFreq+0x144>)
 80027bc:	2300      	movs	r3, #0
 80027be:	69b8      	ldr	r0, [r7, #24]
 80027c0:	69f9      	ldr	r1, [r7, #28]
 80027c2:	f7fd fd4d 	bl	8000260 <__aeabi_lmul>
 80027c6:	0002      	movs	r2, r0
 80027c8:	000b      	movs	r3, r1
 80027ca:	0010      	movs	r0, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f7fd fd21 	bl	8000220 <__aeabi_uldivmod>
 80027de:	0002      	movs	r2, r0
 80027e0:	000b      	movs	r3, r1
 80027e2:	0013      	movs	r3, r2
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
 80027e6:	e037      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027e8:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2210      	movs	r2, #16
 80027ee:	4013      	ands	r3, r2
 80027f0:	d01a      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_RCC_GetSysClockFreq+0x13c>)
 80027fc:	2300      	movs	r3, #0
 80027fe:	68b8      	ldr	r0, [r7, #8]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	f7fd fd2d 	bl	8000260 <__aeabi_lmul>
 8002806:	0002      	movs	r2, r0
 8002808:	000b      	movs	r3, r1
 800280a:	0010      	movs	r0, r2
 800280c:	0019      	movs	r1, r3
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f7fd fd01 	bl	8000220 <__aeabi_uldivmod>
 800281e:	0002      	movs	r2, r0
 8002820:	000b      	movs	r3, r1
 8002822:	0013      	movs	r3, r2
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
 8002826:	e017      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	0018      	movs	r0, r3
 800282c:	2300      	movs	r3, #0
 800282e:	0019      	movs	r1, r3
 8002830:	4a16      	ldr	r2, [pc, #88]	; (800288c <HAL_RCC_GetSysClockFreq+0x140>)
 8002832:	2300      	movs	r3, #0
 8002834:	f7fd fd14 	bl	8000260 <__aeabi_lmul>
 8002838:	0002      	movs	r2, r0
 800283a:	000b      	movs	r3, r1
 800283c:	0010      	movs	r0, r2
 800283e:	0019      	movs	r1, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	001c      	movs	r4, r3
 8002844:	2300      	movs	r3, #0
 8002846:	001d      	movs	r5, r3
 8002848:	0022      	movs	r2, r4
 800284a:	002b      	movs	r3, r5
 800284c:	f7fd fce8 	bl	8000220 <__aeabi_uldivmod>
 8002850:	0002      	movs	r2, r0
 8002852:	000b      	movs	r3, r1
 8002854:	0013      	movs	r3, r2
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800285c:	e00d      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_GetSysClockFreq+0x138>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	0b5b      	lsrs	r3, r3, #13
 8002864:	2207      	movs	r2, #7
 8002866:	4013      	ands	r3, r2
 8002868:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	3301      	adds	r3, #1
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	0212      	lsls	r2, r2, #8
 8002872:	409a      	lsls	r2, r3
 8002874:	0013      	movs	r3, r2
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002878:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b00e      	add	sp, #56	; 0x38
 8002882:	bdb0      	pop	{r4, r5, r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	003d0900 	.word	0x003d0900
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200
 8002894:	08003580 	.word	0x08003580

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80028a0:	2017      	movs	r0, #23
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2220      	movs	r2, #32
 80028ae:	4013      	ands	r3, r2
 80028b0:	d100      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80028b2:	e0c2      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b4:	4b81      	ldr	r3, [pc, #516]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	055b      	lsls	r3, r3, #21
 80028bc:	4013      	ands	r3, r2
 80028be:	d109      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b7e      	ldr	r3, [pc, #504]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c4:	4b7d      	ldr	r3, [pc, #500]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	0549      	lsls	r1, r1, #21
 80028ca:	430a      	orrs	r2, r1
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	4b7a      	ldr	r3, [pc, #488]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	d11a      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e0:	4b77      	ldr	r3, [pc, #476]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	0049      	lsls	r1, r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fb53 	bl	8000f98 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	e008      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fb4e 	bl	8000f98 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0d4      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002916:	4b69      	ldr	r3, [pc, #420]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	23c0      	movs	r3, #192	; 0xc0
 800291c:	039b      	lsls	r3, r3, #14
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	039b      	lsls	r3, r3, #14
 800292a:	4013      	ands	r3, r2
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	429a      	cmp	r2, r3
 8002930:	d013      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	029b      	lsls	r3, r3, #10
 800293a:	401a      	ands	r2, r3
 800293c:	23c0      	movs	r3, #192	; 0xc0
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	429a      	cmp	r2, r3
 8002942:	d10a      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002944:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	029b      	lsls	r3, r3, #10
 800294c:	401a      	ands	r2, r3
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	429a      	cmp	r2, r3
 8002954:	d101      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0ac      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800295a:	4b58      	ldr	r3, [pc, #352]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800295c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800295e:	23c0      	movs	r3, #192	; 0xc0
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	23c0      	movs	r3, #192	; 0xc0
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	4013      	ands	r3, r2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d033      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2220      	movs	r2, #32
 8002982:	4013      	ands	r3, r2
 8002984:	d02e      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002986:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	4a4e      	ldr	r2, [pc, #312]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0309      	lsls	r1, r1, #12
 800299a:	430a      	orrs	r2, r1
 800299c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a2:	4b46      	ldr	r3, [pc, #280]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029a4:	4948      	ldr	r1, [pc, #288]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029a6:	400a      	ands	r2, r1
 80029a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	d014      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe faed 	bl	8000f98 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c2:	e009      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fae8 	bl	8000f98 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	4a3f      	ldr	r2, [pc, #252]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e06d      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0ef      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	23c0      	movs	r3, #192	; 0xc0
 80029ea:	029b      	lsls	r3, r3, #10
 80029ec:	401a      	ands	r2, r3
 80029ee:	23c0      	movs	r3, #192	; 0xc0
 80029f0:	029b      	lsls	r3, r3, #10
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	039b      	lsls	r3, r3, #14
 8002a08:	401a      	ands	r2, r3
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a12:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	23c0      	movs	r3, #192	; 0xc0
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a24:	2317      	movs	r3, #23
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a34:	4927      	ldr	r1, [pc, #156]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	220c      	movs	r2, #12
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d009      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4a15      	ldr	r2, [pc, #84]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b006      	add	sp, #24
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	fffcffff 	.word	0xfffcffff
 8002ac8:	fff7ffff 	.word	0xfff7ffff
 8002acc:	00001388 	.word	0x00001388
 8002ad0:	ffcfffff 	.word	0xffcfffff
 8002ad4:	efffffff 	.word	0xefffffff
 8002ad8:	fffff3ff 	.word	0xfffff3ff
 8002adc:	ffffcfff 	.word	0xffffcfff
 8002ae0:	fff3ffff 	.word	0xfff3ffff

08002ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e032      	b.n	8002b5c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2239      	movs	r2, #57	; 0x39
 8002afa:	5c9b      	ldrb	r3, [r3, r2]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2238      	movs	r2, #56	; 0x38
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fe f907 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2239      	movs	r2, #57	; 0x39
 8002b16:	2102      	movs	r1, #2
 8002b18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	0019      	movs	r1, r3
 8002b24:	0010      	movs	r0, r2
 8002b26:	f000 fa83 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	223e      	movs	r2, #62	; 0x3e
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	223a      	movs	r2, #58	; 0x3a
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223b      	movs	r2, #59	; 0x3b
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223c      	movs	r2, #60	; 0x3c
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	; 0x3d
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2239      	movs	r2, #57	; 0x39
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e032      	b.n	8002bdc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2239      	movs	r2, #57	; 0x39
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2238      	movs	r2, #56	; 0x38
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 f829 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2239      	movs	r2, #57	; 0x39
 8002b96:	2102      	movs	r1, #2
 8002b98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	f000 fa43 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223e      	movs	r2, #62	; 0x3e
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	223a      	movs	r2, #58	; 0x3a
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223b      	movs	r2, #59	; 0x3b
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223c      	movs	r2, #60	; 0x3c
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223d      	movs	r2, #61	; 0x3d
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2239      	movs	r2, #57	; 0x39
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x22>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	223a      	movs	r2, #58	; 0x3a
 8002c08:	5c9b      	ldrb	r3, [r3, r2]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	4193      	sbcs	r3, r2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e01f      	b.n	8002c56 <HAL_TIM_PWM_Start+0x62>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d108      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x3a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223b      	movs	r2, #59	; 0x3b
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	4193      	sbcs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e013      	b.n	8002c56 <HAL_TIM_PWM_Start+0x62>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d108      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x52>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	223c      	movs	r2, #60	; 0x3c
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	4193      	sbcs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e007      	b.n	8002c56 <HAL_TIM_PWM_Start+0x62>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223d      	movs	r2, #61	; 0x3d
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	4193      	sbcs	r3, r2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e048      	b.n	8002cf0 <HAL_TIM_PWM_Start+0xfc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0x7a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	223a      	movs	r2, #58	; 0x3a
 8002c68:	2102      	movs	r1, #2
 8002c6a:	5499      	strb	r1, [r3, r2]
 8002c6c:	e013      	b.n	8002c96 <HAL_TIM_PWM_Start+0xa2>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0x8a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	223b      	movs	r2, #59	; 0x3b
 8002c78:	2102      	movs	r1, #2
 8002c7a:	5499      	strb	r1, [r3, r2]
 8002c7c:	e00b      	b.n	8002c96 <HAL_TIM_PWM_Start+0xa2>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0x9a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	223c      	movs	r2, #60	; 0x3c
 8002c88:	2102      	movs	r1, #2
 8002c8a:	5499      	strb	r1, [r3, r2]
 8002c8c:	e003      	b.n	8002c96 <HAL_TIM_PWM_Start+0xa2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223d      	movs	r2, #61	; 0x3d
 8002c92:	2102      	movs	r1, #2
 8002c94:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f000 fbae 	bl	8003400 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	05db      	lsls	r3, r3, #23
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d004      	beq.n	8002cba <HAL_TIM_PWM_Start+0xc6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_TIM_PWM_Start+0x104>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d111      	bne.n	8002cde <HAL_TIM_PWM_Start+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d010      	beq.n	8002cee <HAL_TIM_PWM_Start+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cdc:	e007      	b.n	8002cee <HAL_TIM_PWM_Start+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40010800 	.word	0x40010800

08002cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	2317      	movs	r3, #23
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2238      	movs	r2, #56	; 0x38
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0ad      	b.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2238      	movs	r2, #56	; 0x38
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d100      	bne.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d2c:	e076      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d900      	bls.n	8002d36 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002d34:	e095      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d04e      	beq.n	8002dda <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d900      	bls.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d42:	e08e      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d021      	beq.n	8002d94 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d50:	e087      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	0011      	movs	r1, r2
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f9b2 	bl	80030c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2108      	movs	r1, #8
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	619a      	str	r2, [r3, #24]
      break;
 8002d92:	e06b      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 f9cd 	bl	800313c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0109      	lsls	r1, r1, #4
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4931      	ldr	r1, [pc, #196]	; (8002e84 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6999      	ldr	r1, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      break;
 8002dd8:	e048      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	0011      	movs	r1, r2
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f9ec 	bl	80031c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2108      	movs	r1, #8
 8002df4:	430a      	orrs	r2, r1
 8002df6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2104      	movs	r1, #4
 8002e04:	438a      	bics	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69d9      	ldr	r1, [r3, #28]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	61da      	str	r2, [r3, #28]
      break;
 8002e1a:	e027      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 fa0b 	bl	8003240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0109      	lsls	r1, r1, #4
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	490f      	ldr	r1, [pc, #60]	; (8002e84 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69d9      	ldr	r1, [r3, #28]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
      break;
 8002e60:	e004      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002e62:	2317      	movs	r3, #23
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
      break;
 8002e6a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2238      	movs	r2, #56	; 0x38
 8002e70:	2100      	movs	r1, #0
 8002e72:	5499      	strb	r1, [r3, r2]

  return status;
 8002e74:	2317      	movs	r3, #23
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	781b      	ldrb	r3, [r3, #0]
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	fffffbff 	.word	0xfffffbff

08002e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	230f      	movs	r3, #15
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2238      	movs	r2, #56	; 0x38
 8002e9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_ConfigClockSource+0x20>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0bc      	b.n	8003022 <HAL_TIM_ConfigClockSource+0x19a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2238      	movs	r2, #56	; 0x38
 8002eac:	2101      	movs	r1, #1
 8002eae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2239      	movs	r2, #57	; 0x39
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2277      	movs	r2, #119	; 0x77
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	0192      	lsls	r2, r2, #6
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d040      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xde>
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0192      	lsls	r2, r2, #6
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d900      	bls.n	8002eee <HAL_TIM_ConfigClockSource+0x66>
 8002eec:	e088      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0152      	lsls	r2, r2, #5
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d100      	bne.n	8002ef8 <HAL_TIM_ConfigClockSource+0x70>
 8002ef6:	e088      	b.n	800300a <HAL_TIM_ConfigClockSource+0x182>
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	0152      	lsls	r2, r2, #5
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d900      	bls.n	8002f02 <HAL_TIM_ConfigClockSource+0x7a>
 8002f00:	e07e      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f02:	2b70      	cmp	r3, #112	; 0x70
 8002f04:	d018      	beq.n	8002f38 <HAL_TIM_ConfigClockSource+0xb0>
 8002f06:	d900      	bls.n	8002f0a <HAL_TIM_ConfigClockSource+0x82>
 8002f08:	e07a      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f0a:	2b60      	cmp	r3, #96	; 0x60
 8002f0c:	d04f      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x126>
 8002f0e:	d900      	bls.n	8002f12 <HAL_TIM_ConfigClockSource+0x8a>
 8002f10:	e076      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f12:	2b50      	cmp	r3, #80	; 0x50
 8002f14:	d03b      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0x106>
 8002f16:	d900      	bls.n	8002f1a <HAL_TIM_ConfigClockSource+0x92>
 8002f18:	e072      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d057      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x146>
 8002f1e:	d900      	bls.n	8002f22 <HAL_TIM_ConfigClockSource+0x9a>
 8002f20:	e06e      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f22:	2b30      	cmp	r3, #48	; 0x30
 8002f24:	d063      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x166>
 8002f26:	d86b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d060      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x166>
 8002f2c:	d868      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d05d      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x166>
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d05b      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x166>
 8002f36:	e063      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f000 fa3a 	bl	80033c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2277      	movs	r2, #119	; 0x77
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
      break;
 8002f64:	e052      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6899      	ldr	r1, [r3, #8]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f000 fa23 	bl	80033c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	01c9      	lsls	r1, r1, #7
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
      break;
 8002f8c:	e03e      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	f000 f996 	bl	80032cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2150      	movs	r1, #80	; 0x50
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f9f0 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002fac:	e02e      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	001a      	movs	r2, r3
 8002fbc:	f000 f9b4 	bl	8003328 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2160      	movs	r1, #96	; 0x60
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 f9e0 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e01e      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	001a      	movs	r2, r3
 8002fdc:	f000 f976 	bl	80032cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f9d0 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002fec:	e00e      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	0010      	movs	r0, r2
 8002ffa:	f000 f9c7 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e005      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
      break;
 8003008:	e000      	b.n	800300c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800300a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2239      	movs	r2, #57	; 0x39
 8003010:	2101      	movs	r1, #1
 8003012:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2238      	movs	r2, #56	; 0x38
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]

  return status;
 800301c:	230f      	movs	r3, #15
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	781b      	ldrb	r3, [r3, #0]
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	ffff00ff 	.word	0xffff00ff

08003030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	05db      	lsls	r3, r3, #23
 8003046:	429a      	cmp	r2, r3
 8003048:	d003      	beq.n	8003052 <TIM_Base_SetConfig+0x22>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <TIM_Base_SetConfig+0x8c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d108      	bne.n	8003064 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2270      	movs	r2, #112	; 0x70
 8003056:	4393      	bics	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	429a      	cmp	r2, r3
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0x46>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <TIM_Base_SetConfig+0x8c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <TIM_Base_SetConfig+0x90>)
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	4393      	bics	r3, r2
 800308e:	001a      	movs	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	615a      	str	r2, [r3, #20]
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40010800 	.word	0x40010800
 80030c0:	fffffcff 	.word	0xfffffcff

080030c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4393      	bics	r3, r2
 80030d6:	001a      	movs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2270      	movs	r2, #112	; 0x70
 80030f2:	4393      	bics	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2203      	movs	r2, #3
 80030fa:	4393      	bics	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2202      	movs	r2, #2
 800310c:	4393      	bics	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b006      	add	sp, #24
 800313a:	bd80      	pop	{r7, pc}

0800313c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2210      	movs	r2, #16
 800314c:	4393      	bics	r3, r2
 800314e:	001a      	movs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <TIM_OC2_SetConfig+0x7c>)
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <TIM_OC2_SetConfig+0x80>)
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2220      	movs	r2, #32
 8003186:	4393      	bics	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b006      	add	sp, #24
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	ffff8fff 	.word	0xffff8fff
 80031bc:	fffffcff 	.word	0xfffffcff

080031c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a1a      	ldr	r2, [pc, #104]	; (8003238 <TIM_OC3_SetConfig+0x78>)
 80031d0:	401a      	ands	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2270      	movs	r2, #112	; 0x70
 80031ec:	4393      	bics	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2203      	movs	r2, #3
 80031f4:	4393      	bics	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <TIM_OC3_SetConfig+0x7c>)
 8003206:	4013      	ands	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b006      	add	sp, #24
 8003236:	bd80      	pop	{r7, pc}
 8003238:	fffffeff 	.word	0xfffffeff
 800323c:	fffffdff 	.word	0xfffffdff

08003240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <TIM_OC4_SetConfig+0x7c>)
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <TIM_OC4_SetConfig+0x80>)
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <TIM_OC4_SetConfig+0x84>)
 8003274:	4013      	ands	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <TIM_OC4_SetConfig+0x88>)
 8003288:	4013      	ands	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b006      	add	sp, #24
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	ffffefff 	.word	0xffffefff
 80032c0:	ffff8fff 	.word	0xffff8fff
 80032c4:	fffffcff 	.word	0xfffffcff
 80032c8:	ffffdfff 	.word	0xffffdfff

080032cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	2201      	movs	r2, #1
 80032e4:	4393      	bics	r3, r2
 80032e6:	001a      	movs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	22f0      	movs	r2, #240	; 0xf0
 80032f6:	4393      	bics	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	220a      	movs	r2, #10
 8003308:	4393      	bics	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b006      	add	sp, #24
 8003326:	bd80      	pop	{r7, pc}

08003328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	2210      	movs	r2, #16
 800333a:	4393      	bics	r3, r2
 800333c:	001a      	movs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <TIM_TI2_ConfigInputStage+0x60>)
 8003352:	4013      	ands	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	031b      	lsls	r3, r3, #12
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	22a0      	movs	r2, #160	; 0xa0
 8003364:	4393      	bics	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b006      	add	sp, #24
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	ffff0fff 	.word	0xffff0fff

0800338c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2270      	movs	r2, #112	; 0x70
 80033a0:	4393      	bics	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	2207      	movs	r2, #7
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <TIM_ETR_SetConfig+0x3c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b006      	add	sp, #24
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	ffff00ff 	.word	0xffff00ff

08003400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	221f      	movs	r2, #31
 8003410:	4013      	ands	r3, r2
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	0013      	movs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	43d2      	mvns	r2, r2
 8003422:	401a      	ands	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	211f      	movs	r1, #31
 8003430:	400b      	ands	r3, r1
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4099      	lsls	r1, r3
 8003436:	000b      	movs	r3, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b006      	add	sp, #24
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2238      	movs	r2, #56	; 0x38
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800345c:	2302      	movs	r3, #2
 800345e:	e03d      	b.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2238      	movs	r2, #56	; 0x38
 8003464:	2101      	movs	r1, #1
 8003466:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2239      	movs	r2, #57	; 0x39
 800346c:	2102      	movs	r1, #2
 800346e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2270      	movs	r2, #112	; 0x70
 8003484:	4393      	bics	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	05db      	lsls	r3, r3, #23
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d004      	beq.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	4393      	bics	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2239      	movs	r2, #57	; 0x39
 80034ce:	2101      	movs	r1, #1
 80034d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2238      	movs	r2, #56	; 0x38
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b004      	add	sp, #16
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010800 	.word	0x40010800

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	2600      	movs	r6, #0
 80034ec:	4d0c      	ldr	r5, [pc, #48]	; (8003520 <__libc_init_array+0x38>)
 80034ee:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034f0:	1b64      	subs	r4, r4, r5
 80034f2:	10a4      	asrs	r4, r4, #2
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	2600      	movs	r6, #0
 80034fa:	f000 f821 	bl	8003540 <_init>
 80034fe:	4d0a      	ldr	r5, [pc, #40]	; (8003528 <__libc_init_array+0x40>)
 8003500:	4c0a      	ldr	r4, [pc, #40]	; (800352c <__libc_init_array+0x44>)
 8003502:	1b64      	subs	r4, r4, r5
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	00b3      	lsls	r3, r6, #2
 800350e:	58eb      	ldr	r3, [r5, r3]
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	00b3      	lsls	r3, r6, #2
 8003518:	58eb      	ldr	r3, [r5, r3]
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08003594 	.word	0x08003594
 8003524:	08003594 	.word	0x08003594
 8003528:	08003594 	.word	0x08003594
 800352c:	08003598 	.word	0x08003598

08003530 <memset>:
 8003530:	0003      	movs	r3, r0
 8003532:	1882      	adds	r2, r0, r2
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	7019      	strb	r1, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
